# Bash extension
# Wanted to leave the default .bashrc file and keep all custom stuff here
# Didn't want to bother with the .bash_profile .bashrc so keeping all in this file at this time, See http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html


# Aliases
alias ..='cd ..'
alias aws-e='printenv | grep AWS'
alias aws-lp="cat ~/.aws/credentials | grep '\[' | tr -d '[]'"
alias aws-sp="printf \"export AWS_PROFILE=%s\nexport AWS_REGION=eu-west-1\nexport AWS_DEFAULT_REGION=eu-west-1\n\" $1"
alias cd-dot="cd $(dirname $(readlink ~/.bashrc_ext))"
alias cgb='cd ~/go/src/bitbucket.org'
alias cgg='cd ~/go/src/github.com'
alias cgmb="cd ~/go/src/bitbucket.org/$USER"
alias cgmg="cd ~/go/src/github.com/$USER"
alias cmo="cd ~/oss/github.com/$USER"
alias glhpv="get-latest-hashicorp-product-version $1"
alias gti='git'
alias ilhp="install-hashicorp-product $1"
alias ipp='dig +short myip.opendns.com @resolver1.opendns.com'			# See https://coderwall.com/p/lyrjsq/extract-your-external-ip-using-command-line-tools
alias np='notepadqq &'
alias trpci='cd ~/go/src/bitbucket.org/trpci'

# Functions
calc-dir-md5sum() { find $1 -type f -exec md5sum {} \; | sort -k 2,2 -V | cut -d ' ' -f 1 | md5sum | cut -d ' ' -f 1; }

get-git-prompt-info() {
	# Blatant copy of https://github.com/jfrazelle/dotfiles/blob/master/.bash_prompt
	local s=''
	local branchName=''

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then
		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+'
			fi

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!'
			fi

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?'
			fi

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$'
			fi
		fi

		# Get the short symbolic ref.
		# If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')"

		[ -n "${s}" ] && s=" [${s}]"
		echo -e "${branchName}${s} "
	else
		return;
	fi
}

get-latest-hashicorp-product-version() {
	: ${1?"Need a product"}
	product=$1

	echo $(curl -s https://releases.hashicorp.com/${product}/ | grep 'href="/' | head -n 1 | grep -oP "${product}_\K([0-9.]*)")
}

install-hashicorp-product() {
	: ${1?"Need a product"}
	product=$1
	version=$2

	# Ensure we have unzip
	[ -z "$(which unzip)" ] && echo "Installing unzip" && sudo apt-get install -y unzip

	# This relies on hashicorp products having a consistent download path
	# If not a specific version then get the latest
	[ -z "$version" ] && version=$(get-latest-hashicorp-product-version $product)
	[ -z "$version" ] && echo "Looks like $product cannot be found" && return

	# Do we already have this version, if so exit
	[ ! -z "$($product version 2>&1 | head -n 1 | grep $version)" ] && echo "$product - $version already installed" && return

	# Download and extract
	wget -O /tmp/${product}.zip https://releases.hashicorp.com/${product}/${version}/${product}_${version}_linux_amd64.zip
	[ $? -ne 0 ] && echo "$product - $version Not found" && return
	echo "Extracting $product - $version, will need sudo"
	sudo unzip -o /tmp/${product}.zip -d /usr/local/bin

	# Check version
	$product version
}


# Configuration
# Prompt - will assume we have colour and just append the git info if in a git repo
export PS1="\${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\] \$(get-git-prompt-info)\$ "

# Include user's private bini directory in PATH if it exists
[ -d "$HOME/bin" ] && PATH="$HOME/bin:$PATH"

# AWS cli tab completion
[ -n "`which aws_completer`" ] && complete -C `which aws_completer` aws

# golang - cater for 2 styles of installation at this time, assumes go is installed
latest_go_version=1.7.1 [ -d /usr/local/go-versions/go$latest_go_version ] && export GOROOT=/usr/local/go-versions/go$latest_go_version || export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin
